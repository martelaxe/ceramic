"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _IpfsPinning_ipfs;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpfsPinning = exports.NoIpfsInstanceError = void 0;
const sha256 = __importStar(require("@stablelib/sha256"));
const base64 = __importStar(require("@stablelib/base64"));
const ipfs_http_client_1 = __importDefault(require("ipfs-http-client"));
const FROM_CONTEXT_HOST = 'ipfs+context';
class NoIpfsInstanceError extends Error {
    constructor() {
        super('No IPFS instance available');
    }
}
exports.NoIpfsInstanceError = NoIpfsInstanceError;
const textEncoder = new TextEncoder();
class IpfsPinning {
    constructor(connectionString, ipfs) {
        this.connectionString = connectionString;
        _IpfsPinning_ipfs.set(this, void 0);
        if (connectionString == 'ipfs+context') {
            this.ipfsAddress = FROM_CONTEXT_HOST;
        }
        else {
            const url = new URL(connectionString);
            const ipfsHost = url.hostname;
            const ipfsPort = parseInt(url.port, 10) || 5001;
            const protocol = url.protocol
                .replace('ipfs+http:', 'http')
                .replace('ipfs+https:', 'https')
                .replace('ipfs+context:', FROM_CONTEXT_HOST);
            if (protocol === FROM_CONTEXT_HOST) {
                this.ipfsAddress = FROM_CONTEXT_HOST;
            }
            else {
                this.ipfsAddress = `${protocol}://${ipfsHost}:${ipfsPort}`;
            }
        }
        __classPrivateFieldSet(this, _IpfsPinning_ipfs, ipfs, "f");
        const bytes = textEncoder.encode(this.connectionString);
        const digest = base64.encodeURLSafe(sha256.hash(bytes));
        this.id = `${IpfsPinning.designator}@${digest}`;
    }
    get ipfs() {
        return __classPrivateFieldGet(this, _IpfsPinning_ipfs, "f");
    }
    open() {
        if (this.ipfsAddress === FROM_CONTEXT_HOST) {
            if (!__classPrivateFieldGet(this, _IpfsPinning_ipfs, "f")) {
                throw new NoIpfsInstanceError();
            }
        }
        else {
            __classPrivateFieldSet(this, _IpfsPinning_ipfs, ipfs_http_client_1.default.create({
                url: this.ipfsAddress,
            }), "f");
        }
    }
    async close() {
    }
    async pin(cid) {
        var _a;
        await ((_a = __classPrivateFieldGet(this, _IpfsPinning_ipfs, "f")) === null || _a === void 0 ? void 0 : _a.pin.add(cid, { recursive: false }));
    }
    async unpin(cid) {
        var _a;
        await ((_a = __classPrivateFieldGet(this, _IpfsPinning_ipfs, "f")) === null || _a === void 0 ? void 0 : _a.pin.rm(cid));
    }
    async ls() {
        var _a;
        const iterable = (_a = __classPrivateFieldGet(this, _IpfsPinning_ipfs, "f")) === null || _a === void 0 ? void 0 : _a.pin.ls();
        if (iterable) {
            const result = {};
            for await (const r of iterable) {
                result[r.cid.toString()] = [this.id];
            }
            return result;
        }
        else {
            return {};
        }
    }
    async info() {
        return { [this.id]: {} };
    }
}
exports.IpfsPinning = IpfsPinning;
_IpfsPinning_ipfs = new WeakMap();
IpfsPinning.designator = 'ipfs';
//# sourceMappingURL=index.js.map