"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateLink = void 0;
const caip_1 = require("caip");
const sig_1 = require("@tendermint/sig");
const blockchain_utils_linking_1 = require("@ceramicnetwork/blockchain-utils-linking");
const uint8arrays = __importStar(require("uint8arrays"));
const namespace = 'cosmos';
const stringEncode = (str) => uint8arrays.toString(uint8arrays.fromString(str), 'base64pad');
const stringDecode = (str) => uint8arrays.toString(uint8arrays.fromString(str, 'base64pad'));
async function validateLink(proof) {
    const account = new caip_1.AccountID(proof.account);
    const encodedMsg = stringEncode(proof.message);
    const payload = blockchain_utils_linking_1.cosmos.asTransaction(account.address, encodedMsg);
    const sigObj = JSON.parse(stringDecode(proof.signature));
    const Tx = { ...payload, ...blockchain_utils_linking_1.cosmos.getMetaData(), signatures: [sigObj] };
    const is_sig_valid = sig_1.verifyTx(Tx, blockchain_utils_linking_1.cosmos.getMetaData());
    return is_sig_valid ? proof : null;
}
exports.validateLink = validateLink;
const Handler = {
    namespace,
    validateLink,
};
exports.default = Handler;
//# sourceMappingURL=cosmos.js.map