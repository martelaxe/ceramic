"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateLink = exports.PUBLIC_KEY_NOT_PUBLISHED_ERROR = exports.ADDRESS_NOT_FOUND_ERROR = void 0;
const caip_1 = require("caip");
const remote_signer_1 = require("@taquito/remote-signer");
const blockchain_utils_linking_1 = require("@ceramicnetwork/blockchain-utils-linking");
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const uint8arrays = __importStar(require("uint8arrays"));
exports.ADDRESS_NOT_FOUND_ERROR = new Error(`Address not found on the Tezos blockchain`);
exports.PUBLIC_KEY_NOT_PUBLISHED_ERROR = new Error(`Public key not published to the Tezos blockchain`);
const { TEZOS_NAMESPACE, TEZOS_CHAIN_REF } = blockchain_utils_linking_1.tezos;
const FAKE_API_ENDPOINT = 'https://fake-api.example.com';
function encodeMessage(text) {
    const michelinePrefix = '05';
    const stringPrefix = '01';
    const len = ('0000000' + text.length.toString(16)).slice(-8);
    text = uint8arrays.toString(uint8arrays.fromString(text, 'utf-8'), 'hex');
    return michelinePrefix + stringPrefix + len + text;
}
function publicKeyFinder(address) {
    const request = cross_fetch_1.default(`https://api.tzstats.com/explorer/account/${address}`).catch((e) => {
        throw exports.ADDRESS_NOT_FOUND_ERROR;
    });
    return async () => {
        const response = await request;
        const json = await response.json();
        const result = json === null || json === void 0 ? void 0 : json.pubkey;
        if (result) {
            return result;
        }
        else {
            throw exports.PUBLIC_KEY_NOT_PUBLISHED_ERROR;
        }
    };
}
async function validateLink(proof) {
    const account = caip_1.AccountID.parse(proof.account);
    const chainId = new caip_1.ChainID(account.chainId);
    if (chainId.reference !== TEZOS_CHAIN_REF) {
        return null;
    }
    const msg = encodeMessage(proof.message);
    const verifier = new remote_signer_1.RemoteSigner(account.address, FAKE_API_ENDPOINT);
    verifier.publicKey = publicKeyFinder(account.address);
    try {
        const is_sig_valid = await verifier.verify(msg, proof.signature);
        return is_sig_valid ? proof : null;
    }
    catch (ignored) {
        return null;
    }
}
exports.validateLink = validateLink;
const Handler = {
    namespace: TEZOS_NAMESPACE,
    validateLink,
};
exports.default = Handler;
//# sourceMappingURL=tezos.js.map