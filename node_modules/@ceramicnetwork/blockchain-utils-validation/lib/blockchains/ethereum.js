"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const wallet_1 = require("@ethersproject/wallet");
const contracts_1 = require("@ethersproject/contracts");
const providers = __importStar(require("@ethersproject/providers"));
const caip_1 = require("caip");
const uint8arrays = __importStar(require("uint8arrays"));
const ADDRESS_TYPES = {
    ethereumEOA: 'ethereum-eoa',
    erc1271: 'erc1271',
};
const ERC1271_ABI = [
    'function isValidSignature(bytes _messageHash, bytes _signature) public view returns (bytes4 magicValue)',
];
const MAGIC_ERC1271_VALUE = '0x20c13b0b';
const namespace = 'eip155';
function utf8toHex(message) {
    const bytes = uint8arrays.fromString(message);
    const hex = uint8arrays.toString(bytes, 'base16');
    return '0x' + hex;
}
function getEthersProvider(chainId) {
    const network = providers.getNetwork(chainId);
    if (!network._defaultProvider)
        throw new Error(`Network with chainId ${chainId} is not supported`);
    return network._defaultProvider(providers);
}
function toV2Proof(proof, address) {
    proof.account = new caip_1.AccountID({
        address: (proof.version === 1 ? proof.address : address) || '',
        chainId: {
            namespace,
            reference: proof.chainId ? proof.chainId.toString() : '1',
        },
    }).toString();
    delete proof.address;
    delete proof.chainId;
    proof.version = 2;
    return proof;
}
async function validateEoaLink(proof) {
    const recoveredAddr = wallet_1.verifyMessage(proof.message, proof.signature).toLowerCase();
    if (proof.version !== 2)
        proof = toV2Proof(proof, recoveredAddr);
    const account = new caip_1.AccountID(proof.account);
    if (account.address !== recoveredAddr) {
        return null;
    }
    return proof;
}
async function validateErc1271Link(proof) {
    if (proof.version === 1)
        proof = toV2Proof(proof);
    const account = new caip_1.AccountID(proof.account);
    const provider = getEthersProvider(account.chainId.reference);
    const contract = new contracts_1.Contract(account.address, ERC1271_ABI, provider);
    const message = utf8toHex(proof.message);
    const returnValue = await contract.isValidSignature(message, proof.signature);
    return returnValue === MAGIC_ERC1271_VALUE ? proof : null;
}
async function validateLink(proof) {
    if (proof.type === ADDRESS_TYPES.erc1271) {
        return await validateErc1271Link(proof);
    }
    else {
        return await validateEoaLink(proof);
    }
}
const handler = {
    namespace,
    validateLink,
};
exports.default = handler;
//# sourceMappingURL=ethereum.js.map