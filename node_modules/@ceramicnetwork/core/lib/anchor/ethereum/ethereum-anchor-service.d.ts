import CID from 'cids';
import { CeramicApi, AnchorServiceResponse, AnchorService, DiagnosticsLogger } from '@ceramicnetwork/common';
import StreamID from '@ceramicnetwork/streamid';
import { Observable } from 'rxjs';
export default class EthereumAnchorService implements AnchorService {
    readonly anchorServiceUrl: string;
    private readonly requestsApiEndpoint;
    private readonly chainIdApiEndpoint;
    private _chainId;
    private readonly providersCache;
    private readonly _logger;
    constructor(anchorServiceUrl: string, logger: DiagnosticsLogger);
    set ceramic(ceramic: CeramicApi);
    get url(): string;
    init(): Promise<void>;
    requestAnchor(streamId: StreamID, tip: CID): Observable<AnchorServiceResponse>;
    getSupportedChains(): Promise<Array<string>>;
    private _announcePending;
    private _makeRequest;
    pollForAnchorResponse(streamId: StreamID, tip: CID): Observable<AnchorServiceResponse>;
    private parseResponse;
}
//# sourceMappingURL=ethereum-anchor-service.d.ts.map