import Ajv from 'ajv';
import { CommitData } from '@ceramicnetwork/common';
import type { TileDocument } from '@ceramicnetwork/stream-tile';
import { Dispatcher } from './dispatcher';
import type { StreamID } from '@ceramicnetwork/streamid';
import type CID from 'cids';
export default class Utils {
    static get validator(): Ajv;
    static awaitCondition(conditionFn: Function, stopFunction: Function, awaitInterval: number): Promise<void>;
    static isSchemaValid(schema: Record<string, unknown>): boolean;
    static validate(content: any, schema: any): void;
    static validateSchema(doc: TileDocument): Promise<void>;
    static getCommitData(dispatcher: Dispatcher, cid: CID, timestamp?: number, streamId?: StreamID): Promise<CommitData>;
}
export declare class TrieNode {
    key: string;
    children: Record<string, TrieNode>;
    constructor(key?: string);
}
export declare class PathTrie {
    root: TrieNode;
    constructor();
    add(path: string): void;
}
export declare const promiseTimeout: (promise: Promise<any>, ms: number, timeoutErrorMsg: string) => Promise<any>;
//# sourceMappingURL=utils.d.ts.map