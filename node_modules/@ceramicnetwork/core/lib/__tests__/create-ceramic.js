"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCeramic = void 0;
const ceramic_1 = __importDefault(require("../ceramic"));
const uint8arrays = __importStar(require("uint8arrays"));
const sha256 = __importStar(require("@stablelib/sha256"));
const tmp_promise_1 = __importDefault(require("tmp-promise"));
const key_did_provider_ed25519_1 = require("key-did-provider-ed25519");
const _3id_did_resolver_1 = __importDefault(require("@ceramicnetwork/3id-did-resolver"));
const key_did_resolver_1 = __importDefault(require("key-did-resolver"));
const did_resolver_1 = require("did-resolver");
const dids_1 = require("dids");
async function createCeramic(ipfs, config) {
    const appliedConfig = {
        stateStoreDirectory: await tmp_promise_1.default.tmpName(),
        anchorOnRequest: false,
        streamCacheLimit: 100,
        pubsubTopic: '/ceramic/inmemory/test',
        ...config,
    };
    const ceramic = await ceramic_1.default.create(ipfs, appliedConfig);
    const seed = sha256.hash(uint8arrays.fromString(appliedConfig.seed || 'SEED'));
    const provider = new key_did_provider_ed25519_1.Ed25519Provider(seed);
    const keyDidResolver = key_did_resolver_1.default.getResolver();
    const threeIdResolver = _3id_did_resolver_1.default.getResolver(ceramic);
    const resolver = new did_resolver_1.Resolver({
        ...threeIdResolver,
        ...keyDidResolver,
    });
    const did = new dids_1.DID({ provider, resolver });
    await ceramic.setDID(did);
    await did.authenticate();
    return ceramic;
}
exports.createCeramic = createCeramic;
//# sourceMappingURL=create-ceramic.js.map