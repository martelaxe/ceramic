import type CID from 'cids';
import { AnchorValidator, CommitData, Context, InternalOpts, LogEntry, StreamState, StreamStateHolder } from '@ceramicnetwork/common';
import { Dispatcher } from './dispatcher';
import { CommitID } from '@ceramicnetwork/streamid';
import { StateValidation } from './state-management/state-validation';
import { HandlersMap } from './handlers-map';
export declare function pickLogToAccept(state1: StreamState, state2: StreamState): Promise<StreamState>;
export declare class HistoryLog {
    private readonly dispatcher;
    readonly items: LogEntry[];
    static fromState(dispatcher: Dispatcher, state: StreamState): HistoryLog;
    constructor(dispatcher: Dispatcher, items: LogEntry[]);
    get length(): number;
    includes(cid: CID): boolean;
    get last(): CID;
    findIndex(cid: CID): number;
    slice(start?: number, end?: number): HistoryLog;
    toCommitData(): Promise<CommitData[]>;
}
export declare function fetchLog(dispatcher: Dispatcher, cid: CID, stateLog: HistoryLog, unappliedCommits?: CommitData[], timestamp?: number): Promise<CommitData[]>;
export declare function commitAtTime(stateHolder: StreamStateHolder, timestamp: number): CommitID;
export declare class ConflictResolution {
    anchorValidator: AnchorValidator;
    private readonly stateValidation;
    private readonly dispatcher;
    private readonly context;
    private readonly handlers;
    constructor(anchorValidator: AnchorValidator, stateValidation: StateValidation, dispatcher: Dispatcher, context: Context, handlers: HandlersMap);
    private applyCommitDataToState;
    private applyLogToState;
    private applyLog;
    applyTip(initialState: StreamState, tip: CID, opts: InternalOpts): Promise<StreamState | null>;
    verifyLoneGenesis(state: StreamState): Promise<void>;
    snapshotAtCommit(initialState: StreamState, commitId: CommitID): Promise<StreamState>;
}
//# sourceMappingURL=conflict-resolution.d.ts.map