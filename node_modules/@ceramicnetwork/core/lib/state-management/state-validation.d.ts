import { StreamNext, StreamState, Stream } from '@ceramicnetwork/common';
import { CommitID } from '@ceramicnetwork/streamid';
declare type LoadDocumentFunc = <T extends Stream>(streamId: CommitID) => Promise<T>;
export interface StateValidation {
    validate(state: StreamState | StreamNext, content: any): Promise<void>;
}
export declare class FauxStateValidation implements StateValidation {
    validate(state: StreamState | StreamNext, content: any): Promise<void>;
}
export declare class RealStateValidation implements StateValidation {
    private readonly loadStream;
    constructor(loadStream: LoadDocumentFunc);
    private loadSchemaById;
    private loadSchema;
    validate(state: StreamState | StreamNext, content: any): Promise<void>;
}
export {};
//# sourceMappingURL=state-validation.d.ts.map