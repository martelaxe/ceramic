"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RunningState = void 0;
const common_1 = require("@ceramicnetwork/common");
const streamid_1 = require("@ceramicnetwork/streamid");
class RunningState extends common_1.StreamStateSubject {
    constructor(initial, pinned) {
        super(initial);
        this.subscriptionSet = new common_1.SubscriptionSet();
        this._pinnedCommits = null;
        this.id = new streamid_1.StreamID(initial.type, initial.log[0].cid);
        if (pinned) {
            this.markAsPinned();
        }
    }
    get tip() {
        return this.value.log[this.value.log.length - 1].cid;
    }
    get state() {
        return this.value;
    }
    get pinnedCommits() {
        return this._pinnedCommits;
    }
    get isPinned() {
        return this.pinnedCommits && this.pinnedCommits.size > 0;
    }
    add(subscription) {
        this.subscriptionSet.add(subscription);
    }
    complete() {
        this.subscriptionSet.unsubscribe();
        super.complete();
    }
    markAsPinned() {
        this._pinnedCommits = new Set(this.state.log.map(({ cid }) => cid.toString()));
    }
    markAsUnpinned() {
        this._pinnedCommits = null;
    }
}
exports.RunningState = RunningState;
//# sourceMappingURL=running-state.js.map