import StreamID, { CommitID } from '@ceramicnetwork/streamid';
import { AnchorService, Context, CreateOpts, LoadOpts, PinningOpts, PublishOpts, StreamState, UpdateOpts } from '@ceramicnetwork/common';
import { PinStore } from '../store/pin-store';
import { DiagnosticsLogger } from '@ceramicnetwork/common';
import { ExecutionQueue } from './execution-queue';
import { RunningState } from './running-state';
import { StateManager } from './state-manager';
import type { Dispatcher } from '../dispatcher';
import type { ConflictResolution } from '../conflict-resolution';
import type { HandlersMap } from '../handlers-map';
import type { StateValidation } from './state-validation';
import { Observable } from 'rxjs';
import { StateCache } from './state-cache';
import { SnapshotState } from './snapshot-state';
export declare type RepositoryDependencies = {
    dispatcher: Dispatcher;
    pinStore: PinStore;
    context: Context;
    handlers: HandlersMap;
    anchorService: AnchorService;
    conflictResolution: ConflictResolution;
    stateValidation: StateValidation;
};
export declare class Repository {
    #private;
    private readonly logger;
    readonly loadingQ: ExecutionQueue;
    readonly executionQ: ExecutionQueue;
    readonly inmemory: StateCache<RunningState>;
    stateManager: StateManager;
    constructor(cacheLimit: number, concurrencyLimit: number, logger: DiagnosticsLogger);
    get pinStore(): PinStore;
    setDeps(deps: RepositoryDependencies): void;
    private fromMemory;
    private fromStateStore;
    private fromNetwork;
    _loadGenesis(streamId: StreamID): Promise<[RunningState, boolean]>;
    load(streamId: StreamID, opts: LoadOpts): Promise<RunningState>;
    loadAtCommit(commitId: CommitID, opts: LoadOpts): Promise<SnapshotState>;
    loadAtTime(streamId: StreamID, opts: LoadOpts): Promise<SnapshotState>;
    applyCommit(streamId: StreamID, commit: any, opts: CreateOpts | UpdateOpts): Promise<RunningState>;
    applyWriteOpts(state$: RunningState, opts: CreateOpts | UpdateOpts): Promise<void>;
    handlePinOpts(state$: RunningState, opts: PinningOpts): Promise<void>;
    applyCreateOpts(streamId: StreamID, opts: CreateOpts): Promise<RunningState>;
    get(streamId: StreamID): Promise<RunningState | undefined>;
    streamState(streamId: StreamID): Promise<StreamState | undefined>;
    add(state$: RunningState): void;
    pin(state$: RunningState, force?: boolean): Promise<void>;
    unpin(state$: RunningState, opts?: PublishOpts): Promise<void>;
    listPinned(streamId?: StreamID): Promise<string[]>;
    updates$(init: StreamState): Observable<StreamState>;
    close(): Promise<void>;
}
//# sourceMappingURL=repository.d.ts.map