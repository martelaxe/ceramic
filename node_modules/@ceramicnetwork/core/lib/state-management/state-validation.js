"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RealStateValidation = exports.FauxStateValidation = void 0;
const streamid_1 = require("@ceramicnetwork/streamid");
const utils_1 = __importDefault(require("../utils"));
class FauxStateValidation {
    async validate(state, content) {
        return;
    }
}
exports.FauxStateValidation = FauxStateValidation;
class RealStateValidation {
    constructor(loadStream) {
        this.loadStream = loadStream;
    }
    loadSchemaById(schemaStreamId) {
        let commitId;
        try {
            commitId = streamid_1.CommitID.fromString(schemaStreamId);
        }
        catch (_a) {
            throw new Error('Commit missing when loading schema document');
        }
        return this.loadStream(commitId).then((doc) => doc.content);
    }
    async loadSchema(state) {
        var _a;
        const schemaId = (_a = state.metadata) === null || _a === void 0 ? void 0 : _a.schema;
        if (schemaId) {
            return this.loadSchemaById(schemaId);
        }
        else {
            return null;
        }
    }
    async validate(state, content) {
        const schema = await this.loadSchema(state);
        if (schema) {
            utils_1.default.validate(content, schema);
        }
    }
}
exports.RealStateValidation = RealStateValidation;
//# sourceMappingURL=state-validation.js.map