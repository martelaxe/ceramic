import { Dispatcher } from '../dispatcher';
import { PinStore } from '../store/pin-store';
import { ExecutionQueue } from './execution-queue';
import { ConflictResolution } from '../conflict-resolution';
import { AnchorService, CreateOpts, LoadOpts, UpdateOpts, RunningStateLike, DiagnosticsLogger } from '@ceramicnetwork/common';
import { RunningState } from './running-state';
import CID from 'cids';
import { Subscription } from 'rxjs';
import { SnapshotState } from './snapshot-state';
import { CommitID, StreamID } from '@ceramicnetwork/streamid';
export declare class StateManager {
    private readonly dispatcher;
    private readonly pinStore;
    private readonly executionQ;
    anchorService: AnchorService;
    conflictResolution: ConflictResolution;
    private readonly logger;
    private readonly fromMemoryOrStore;
    private readonly load;
    private readonly syncedPinnedStreams;
    constructor(dispatcher: Dispatcher, pinStore: PinStore, executionQ: ExecutionQueue, anchorService: AnchorService, conflictResolution: ConflictResolution, logger: DiagnosticsLogger, fromMemoryOrStore: (streamId: StreamID) => Promise<RunningState | undefined>, load: (streamId: StreamID, opts?: LoadOpts | CreateOpts) => Promise<RunningState>);
    wasPinnedStreamSynced(streamId: StreamID): boolean;
    sync(state$: RunningState, timeoutMillis: number): Promise<void>;
    verifyLoneGenesis(state$: RunningState): Promise<RunningState>;
    atCommit(state$: RunningStateLike, commitId: CommitID): Promise<SnapshotState>;
    atTime(state$: RunningStateLike, timestamp: number): Promise<SnapshotState>;
    applyWriteOpts(state$: RunningState, opts: CreateOpts | UpdateOpts): void;
    private _handleTip;
    private _updateStateIfPinned;
    publishTip(state$: RunningState): void;
    update(streamId: StreamID, tip: CID): void;
    applyCommit(streamId: StreamID, commit: any, opts: CreateOpts | UpdateOpts): Promise<RunningState>;
    private _handleAnchorCommit;
    anchor(state$: RunningState): Subscription;
    confirmAnchorResponse(state$: RunningState): Subscription;
    private _processAnchorResponse;
}
//# sourceMappingURL=state-manager.d.ts.map