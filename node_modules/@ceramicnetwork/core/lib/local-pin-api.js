"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalPinApi = void 0;
const common_1 = require("@ceramicnetwork/common");
class LocalPinApi {
    constructor(repository, logger) {
        this.repository = repository;
        this.logger = logger;
    }
    async add(streamId, force) {
        const state$ = await this.repository.load(streamId, { sync: common_1.SyncOptions.PREFER_CACHE });
        await this.repository.pin(state$, force);
        this.logger.verbose(`Pinned stream ${streamId.toString()}`);
    }
    async rm(streamId, opts) {
        const state$ = await this.repository.get(streamId);
        if (!state$) {
            this.logger.verbose(`Cannot unpin stream ${streamId.toString()} as it isn't pinned`);
            return;
        }
        await this.repository.unpin(state$, opts);
        this.logger.verbose(`Unpinned stream ${streamId.toString()}`);
    }
    async ls(streamId) {
        const streamIds = await this.repository.listPinned(streamId ? streamId.baseID : null);
        return {
            [Symbol.asyncIterator]() {
                let index = 0;
                return {
                    next() {
                        if (index === streamIds.length) {
                            return Promise.resolve({ value: null, done: true });
                        }
                        return Promise.resolve({ value: streamIds[index++], done: false });
                    },
                };
            },
        };
    }
}
exports.LocalPinApi = LocalPinApi;
//# sourceMappingURL=local-pin-api.js.map