"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _LevelStateStore_store;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LevelStateStore = void 0;
const level_ts_1 = __importDefault(require("level-ts"));
const common_1 = require("@ceramicnetwork/common");
const fs = __importStar(require("fs"));
const path_1 = __importDefault(require("path"));
class LevelStateStore {
    constructor(storeRoot) {
        this.storeRoot = storeRoot;
        _LevelStateStore_store.set(this, void 0);
    }
    get store() {
        return __classPrivateFieldGet(this, _LevelStateStore_store, "f");
    }
    open(networkName) {
        const storePath = path_1.default.join(this.storeRoot, networkName);
        if (fs) {
            fs.mkdirSync(storePath, { recursive: true });
        }
        __classPrivateFieldSet(this, _LevelStateStore_store, new level_ts_1.default(storePath), "f");
    }
    async save(streamStateHolder) {
        await __classPrivateFieldGet(this, _LevelStateStore_store, "f").put(streamStateHolder.id.toString(), common_1.StreamUtils.serializeState(streamStateHolder.state));
    }
    async load(streamId) {
        try {
            const state = await __classPrivateFieldGet(this, _LevelStateStore_store, "f").get(streamId.baseID.toString());
            if (state) {
                return common_1.StreamUtils.deserializeState(state);
            }
            else {
                return null;
            }
        }
        catch (err) {
            if (err.notFound) {
                return null;
            }
            throw err;
        }
    }
    async remove(streamId) {
        await __classPrivateFieldGet(this, _LevelStateStore_store, "f").del(streamId.baseID.toString());
    }
    async list(streamId) {
        let streamIds;
        if (streamId == null) {
            return __classPrivateFieldGet(this, _LevelStateStore_store, "f").stream({ keys: true, values: false });
        }
        else {
            const exists = Boolean(await this.load(streamId.baseID));
            streamIds = exists ? [streamId.toString()] : [];
        }
        return streamIds;
    }
    async close() {
    }
}
exports.LevelStateStore = LevelStateStore;
_LevelStateStore_store = new WeakMap();
//# sourceMappingURL=level-state-store.js.map