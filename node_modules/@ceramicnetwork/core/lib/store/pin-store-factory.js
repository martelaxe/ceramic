"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PinStoreFactory = exports.DEFAULT_STATE_STORE_DIRECTORY = void 0;
const level_state_store_1 = require("./level-state-store");
const pinning_aggregation_1 = require("@ceramicnetwork/pinning-aggregation");
const pin_store_1 = require("./pin-store");
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const pinning_ipfs_backend_1 = require("@ceramicnetwork/pinning-ipfs-backend");
exports.DEFAULT_STATE_STORE_DIRECTORY = path_1.default.join(os_1.default.homedir(), '.ceramic', 'statestore');
const IPFS_GET_TIMEOUT = 60000;
class PinStoreFactory {
    constructor(ipfs, props) {
        this.ipfs = ipfs;
        this.networkName = props.networkName;
        this.localStateStoreDirectory = props.stateStoreDirectory || exports.DEFAULT_STATE_STORE_DIRECTORY;
        this.pinningEndpoints =
            props.pinningEndpoints && props.pinningEndpoints.length > 0
                ? props.pinningEndpoints
                : ['ipfs+context'];
        this.pinningBackends =
            props.pinningBackends && props.pinningBackends.length > 0
                ? props.pinningBackends
                : [pinning_ipfs_backend_1.IpfsPinning];
    }
    setStateStore(stateStore) {
        this._stateStore = stateStore;
    }
    createPinStore() {
        if (!this._stateStore) {
            this._stateStore = new level_state_store_1.LevelStateStore(this.localStateStoreDirectory);
        }
        const ipfs = this.ipfs;
        const pinning = pinning_aggregation_1.PinningAggregation.build(ipfs, this.pinningEndpoints, this.pinningBackends);
        const retrieve = async (cid) => {
            const blob = await ipfs.dag.get(cid, { timeout: IPFS_GET_TIMEOUT });
            return blob === null || blob === void 0 ? void 0 : blob.value;
        };
        const resolve = async (path) => {
            return (await ipfs.dag.resolve(path)).cid;
        };
        const pinStore = new pin_store_1.PinStore(this._stateStore, pinning, retrieve, resolve);
        pinStore.open(this.networkName);
        return pinStore;
    }
}
exports.PinStoreFactory = PinStoreFactory;
//# sourceMappingURL=pin-store-factory.js.map