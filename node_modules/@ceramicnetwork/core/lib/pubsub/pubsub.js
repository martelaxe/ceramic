"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pubsub = void 0;
const rxjs_1 = require("rxjs");
const pubsub_message_1 = require("./pubsub-message");
const operators_1 = require("rxjs/operators");
const incoming_channel_1 = require("./incoming-channel");
const util_1 = require("util");
const to_string_1 = __importDefault(require("uint8arrays/to-string"));
const textDecoder = new util_1.TextDecoder('utf-8');
function ipfsToPubsub(peerId$, pubsubLogger, topic) {
    return rxjs_1.pipe(operators_1.withLatestFrom(peerId$), operators_1.mergeMap(([incoming, peerId]) => rxjs_1.of(incoming).pipe(operators_1.map((incoming) => {
        const message = pubsub_message_1.deserialize(incoming);
        const serializedMessage = pubsub_message_1.serialize(message);
        const logMessage = { ...incoming, ...JSON.parse(textDecoder.decode(serializedMessage)) };
        logMessage.seqno = to_string_1.default(logMessage.seqno, 'base16');
        delete logMessage.data;
        delete logMessage.key;
        delete logMessage.signature;
        pubsubLogger.log({ peer: peerId, event: 'received', topic: topic, message: logMessage });
        return message;
    }), operators_1.catchError(() => rxjs_1.EMPTY))));
}
class Pubsub extends rxjs_1.Observable {
    constructor(ipfs, topic, resubscribeEvery, pubsubLogger, logger) {
        super((subscriber) => {
            const incoming$ = new incoming_channel_1.IncomingChannel(ipfs, topic, resubscribeEvery, pubsubLogger, logger);
            incoming$
                .pipe(incoming_channel_1.filterExternal(this.peerId$), ipfsToPubsub(this.peerId$, pubsubLogger, topic))
                .subscribe(subscriber);
        });
        this.ipfs = ipfs;
        this.topic = topic;
        this.resubscribeEvery = resubscribeEvery;
        this.pubsubLogger = pubsubLogger;
        this.logger = logger;
        this.peerId$ = rxjs_1.from(this.ipfs.id().then((_) => _.id));
    }
    next(message) {
        return this.peerId$
            .pipe(operators_1.mergeMap(async (peerId) => {
            const serializedMessage = pubsub_message_1.serialize(message);
            await this.ipfs.pubsub.publish(this.topic, serializedMessage);
            return { peerId, serializedMessage };
        }))
            .subscribe({
            next: ({ peerId, serializedMessage }) => {
                const logMessage = { ...message, ...JSON.parse(textDecoder.decode(serializedMessage)) };
                this.pubsubLogger.log({
                    peer: peerId,
                    event: 'published',
                    topic: this.topic,
                    message: logMessage,
                });
            },
            error: (error) => {
                this.logger.err(error);
            },
        });
    }
}
exports.Pubsub = Pubsub;
//# sourceMappingURL=pubsub.js.map