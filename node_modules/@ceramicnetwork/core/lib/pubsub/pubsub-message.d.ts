import StreamID from '@ceramicnetwork/streamid';
import CID from 'cids';
export declare enum MsgType {
    UPDATE = 0,
    QUERY = 1,
    RESPONSE = 2,
    KEEPALIVE = 3
}
export declare type UpdateMessage = {
    typ: MsgType.UPDATE;
    stream: StreamID;
    tip: CID;
};
export declare type QueryMessage = {
    typ: MsgType.QUERY;
    id: string;
    stream: StreamID;
};
export declare type ResponseMessage = {
    typ: MsgType.RESPONSE;
    id: string;
    tips: Map<string, CID>;
};
export declare type KeepaliveMessage = {
    typ: MsgType.KEEPALIVE;
    ts: number;
};
export declare type PubsubMessage = UpdateMessage | QueryMessage | ResponseMessage | KeepaliveMessage;
export declare function buildQueryMessage(streamId: StreamID): QueryMessage;
export declare function serialize(message: PubsubMessage): Uint8Array;
export declare function deserialize(message: any): PubsubMessage;
//# sourceMappingURL=pubsub-message.d.ts.map