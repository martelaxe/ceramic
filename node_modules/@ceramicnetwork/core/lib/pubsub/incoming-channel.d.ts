import { Observable } from 'rxjs';
import { IpfsApi } from '@ceramicnetwork/common';
import { TaskQueue } from './task-queue';
import { DiagnosticsLogger, ServiceLogger } from '@ceramicnetwork/common';
import { MonoTypeOperatorFunction } from 'rxjs';
export declare type IPFSPubsubMessage = {
    from: string;
    seqno: Uint8Array;
    data: Uint8Array;
    topicIDs: string[];
    signature: Uint8Array;
    key: Uint8Array;
};
export declare class IncomingChannel extends Observable<IPFSPubsubMessage> {
    readonly ipfs: IpfsApi;
    readonly topic: string;
    readonly resubscribeEvery: number;
    readonly pubsubLogger: ServiceLogger;
    readonly logger: DiagnosticsLogger;
    readonly tasks: TaskQueue;
    constructor(ipfs: IpfsApi, topic: string, resubscribeEvery: number, pubsubLogger: ServiceLogger, logger: DiagnosticsLogger);
    private subscribeToIpfs;
}
export declare function filterExternal(ownPeerId$: Observable<string>): MonoTypeOperatorFunction<IPFSPubsubMessage>;
//# sourceMappingURL=incoming-channel.d.ts.map