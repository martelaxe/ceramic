"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _TaskQueue_pq;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskQueue = exports.noop = void 0;
const p_queue_1 = __importDefault(require("p-queue"));
const noop = () => {
};
exports.noop = noop;
class TaskQueue {
    constructor(onError = exports.noop) {
        this.onError = onError;
        _TaskQueue_pq.set(this, new p_queue_1.default({ concurrency: 1 }));
    }
    get size() {
        return __classPrivateFieldGet(this, _TaskQueue_pq, "f").size + __classPrivateFieldGet(this, _TaskQueue_pq, "f").pending;
    }
    add(task, onFinally) {
        this.run(task)
            .catch((error) => {
            const retry = () => this.add(task, onFinally);
            this.onError(error, retry);
        })
            .finally(() => onFinally === null || onFinally === void 0 ? void 0 : onFinally());
    }
    run(task) {
        return __classPrivateFieldGet(this, _TaskQueue_pq, "f").add(task);
    }
    onIdle() {
        return __classPrivateFieldGet(this, _TaskQueue_pq, "f").onIdle();
    }
    clear() {
        __classPrivateFieldGet(this, _TaskQueue_pq, "f").clear();
    }
    pause() {
        __classPrivateFieldGet(this, _TaskQueue_pq, "f").pause();
    }
}
exports.TaskQueue = TaskQueue;
_TaskQueue_pq = new WeakMap();
//# sourceMappingURL=task-queue.js.map