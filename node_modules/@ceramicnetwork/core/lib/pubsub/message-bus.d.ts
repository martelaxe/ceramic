import { PubsubMessage } from './pubsub-message';
import { Observable, Subscription, SubscriptionLike } from 'rxjs';
import { StreamID } from '@ceramicnetwork/streamid';
import CID from 'cids';
import { ObservableWithNext } from './observable-with-next';
export declare const MAX_RESPONSE_INTERVAL = 300;
export declare class MessageBus extends Observable<PubsubMessage> implements SubscriptionLike {
    readonly pubsub: ObservableWithNext<PubsubMessage>;
    readonly outstandingQueries: Map<string, StreamID>;
    private readonly pubsubSubscription;
    private readonly feed$;
    constructor(pubsub: ObservableWithNext<PubsubMessage>);
    get closed(): boolean;
    next(message: PubsubMessage): Subscription;
    queryNetwork(streamId: StreamID): Observable<CID>;
    unsubscribe(): void;
}
//# sourceMappingURL=message-bus.d.ts.map