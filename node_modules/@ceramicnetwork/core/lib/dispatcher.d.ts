import CID from 'cids';
import { DiagnosticsLogger, IpfsApi, ServiceLogger } from '@ceramicnetwork/common';
import StreamID from '@ceramicnetwork/streamid';
import { Repository } from './state-management/repository';
import { PubsubMessage, QueryMessage, ResponseMessage, UpdateMessage } from './pubsub/pubsub-message';
import { Subscription } from 'rxjs';
import { MessageBus } from './pubsub/message-bus';
import { LRUMap } from 'lru_map';
export declare class Dispatcher {
    readonly _ipfs: IpfsApi;
    private readonly topic;
    readonly repository: Repository;
    private readonly _logger;
    private readonly _pubsubLogger;
    readonly messageBus: MessageBus;
    readonly dagNodeCache: LRUMap<string, any>;
    constructor(_ipfs: IpfsApi, topic: string, repository: Repository, _logger: DiagnosticsLogger, _pubsubLogger: ServiceLogger, maxQueriesPerSecond: number);
    storeCommit(data: any, streamId?: StreamID): Promise<CID>;
    retrieveCommit(cid: CID | string, streamId?: StreamID): Promise<any>;
    retrieveFromIPFS(cid: CID | string, path?: string): Promise<any>;
    private _getFromIpfs;
    _restrictCommitSize(cid: CID | string): Promise<void>;
    publishTip(streamId: StreamID, tip: CID): Subscription;
    handleMessage(message: PubsubMessage): Promise<void>;
    _handleUpdateMessage(message: UpdateMessage): Promise<void>;
    _handleQueryMessage(message: QueryMessage): Promise<void>;
    _handleResponseMessage(message: ResponseMessage): Promise<void>;
    close(): Promise<void>;
    private publish;
}
//# sourceMappingURL=dispatcher.d.ts.map