"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.promiseTimeout = exports.PathTrie = exports.TrieNode = void 0;
const ajv_1 = __importDefault(require("ajv"));
const ajv_formats_1 = __importDefault(require("ajv-formats"));
const typescript_memoize_1 = require("typescript-memoize");
const common_1 = require("@ceramicnetwork/common");
class Utils {
    static get validator() {
        const ajv = new ajv_1.default({ allErrors: true, strictTypes: false, strictTuples: false });
        ajv_formats_1.default(ajv);
        return ajv;
    }
    static async awaitCondition(conditionFn, stopFunction, awaitInterval) {
        while (conditionFn()) {
            if (stopFunction()) {
                return;
            }
            await new Promise((resolve) => setTimeout(resolve, awaitInterval));
        }
    }
    static isSchemaValid(schema) {
        Utils.validator.compile(schema);
        return Utils.validator.validateSchema(schema);
    }
    static validate(content, schema) {
        const isValid = Utils.validator.validate(schema, content);
        if (!isValid) {
            const errorMessages = Utils.validator.errorsText();
            throw new Error(`Validation Error: ${errorMessages}`);
        }
    }
    static async validateSchema(doc) {
        var _a, _b;
        const schemaStreamId = (_b = (_a = doc.state) === null || _a === void 0 ? void 0 : _a.metadata) === null || _b === void 0 ? void 0 : _b.schema;
        if (schemaStreamId) {
            const schemaDoc = await doc.api.loadStream(schemaStreamId);
            if (!schemaDoc) {
                throw new Error(`Schema not found for ${schemaStreamId}`);
            }
            Utils.validate(doc.content, schemaDoc.content);
        }
    }
    static async getCommitData(dispatcher, cid, timestamp, streamId) {
        const commit = await dispatcher.retrieveCommit(cid, streamId);
        if (!commit)
            throw new Error(`No commit found for CID ${cid.toString()}`);
        const commitData = { cid, type: common_1.CommitType.SIGNED, commit, timestamp };
        if (common_1.StreamUtils.isSignedCommit(commit)) {
            const linkedCommit = await dispatcher.retrieveCommit(commit.link, streamId);
            if (!linkedCommit)
                throw new Error(`No commit found for CID ${commit.link.toString()}`);
            commitData.commit = linkedCommit;
            commitData.envelope = commit;
        }
        else if (common_1.StreamUtils.isAnchorCommit(commit)) {
            commitData.type = common_1.CommitType.ANCHOR;
            commitData.proof = await dispatcher.retrieveFromIPFS(commit.proof);
            commitData.timestamp = commitData.proof.blockTimestamp;
        }
        if (!commitData.commit.prev)
            commitData.type = common_1.CommitType.GENESIS;
        return commitData;
    }
}
__decorate([
    typescript_memoize_1.Memoize(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], Utils, "validator", null);
exports.default = Utils;
class TrieNode {
    constructor(key = '') {
        this.key = key;
        this.children = {};
    }
}
exports.TrieNode = TrieNode;
class PathTrie {
    constructor() {
        this.root = new TrieNode();
    }
    add(path) {
        const nextNodeAdd = (node, key) => {
            if (!node.children[key])
                node.children[key] = new TrieNode(key);
            return node.children[key];
        };
        if (path.startsWith('/'))
            path = path.substring(1);
        path.split('/').reduce(nextNodeAdd, this.root);
    }
}
exports.PathTrie = PathTrie;
const promiseTimeout = (promise, ms, timeoutErrorMsg) => {
    const timeout = new Promise((resolve, reject) => {
        setTimeout(() => reject(new Error(timeoutErrorMsg)), ms);
    });
    return Promise.race([timeout, promise]);
};
exports.promiseTimeout = promiseTimeout;
//# sourceMappingURL=utils.js.map