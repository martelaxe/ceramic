{"version":3,"file":"taquito-remote-signer.umd.js","sources":["../src/errors.ts","../src/version.ts","../src/taquito-remote-signer.ts"],"sourcesContent":["export class KeyNotFoundError implements Error {\n  public name: string = 'KeyNotFoundError';\n  constructor(public message: string, public innerException: any) {}\n}\n\nexport class OperationNotAuthorizedError implements Error {\n  public name: string = 'OperationNotAuthorized';\n  constructor(public message: string, public innerException: any) {}\n}\n\nexport class BadSigningDataError implements Error {\n  public name: string = 'BadSigningData';\n  constructor(public message: string, public innerException: any, public readonly data: any) {}\n}\n","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n/* tslint:disable */\nexport const VERSION = {\n    \"commitHash\": \"a8e9548e650215186f661033b59299ace72c9ee6\",\n    \"version\": \"9.2.0\"\n};\n/* tslint:enable */\n","/**\n * @packageDocumentation\n * @module @taquito/remote-signer\n */\nimport { HttpBackend, HttpResponseError, STATUS_CODE } from '@taquito/http-utils';\nimport {\n  b58cdecode,\n  b58cencode,\n  buf2hex,\n  hex2buf,\n  isValidPrefix,\n  mergebuf,\n  prefix,\n} from '@taquito/utils';\nimport sodium from 'libsodium-wrappers';\nimport elliptic from 'elliptic';\nimport toBuffer from 'typedarray-to-buffer';\nimport { BadSigningDataError, KeyNotFoundError, OperationNotAuthorizedError } from './errors';\nimport { Signer } from '@taquito/taquito';\ninterface PublicKeyResponse {\n  public_key: string;\n}\n\ninterface SignResponse {\n  signature: string;\n}\n\ntype curves = 'ed' | 'p2' | 'sp';\n\nexport interface RemoteSignerOptions {\n  headers?: { [key: string]: string };\n}\n\nexport { VERSION } from './version';\n\nconst pref = {\n  ed: {\n    pk: prefix['edpk'],\n    sk: prefix['edsk'],\n    pkh: prefix.tz1,\n    sig: prefix.edsig,\n  },\n  p2: {\n    pk: prefix['p2pk'],\n    sk: prefix['p2sk'],\n    pkh: prefix.tz3,\n    sig: prefix.p2sig,\n  },\n  sp: {\n    pk: prefix['sppk'],\n    sk: prefix['spsk'],\n    pkh: prefix.tz2,\n    sig: prefix.spsig,\n  },\n};\n\nexport class RemoteSigner implements Signer {\n  constructor(\n    private pkh: string,\n    private rootUrl: string,\n    private options: RemoteSignerOptions = {},\n    private http = new HttpBackend()\n  ) {}\n\n  async publicKeyHash(): Promise<string> {\n    return this.pkh;\n  }\n\n  private createURL(path: string) {\n    // Trim trailing slashes because it is assumed to be included in path\n    return `${this.rootUrl.replace(/\\/+$/g, '')}${path}`;\n  }\n\n  async publicKey(): Promise<string> {\n    try {\n      const { public_key } = await this.http.createRequest<PublicKeyResponse>({\n        url: this.createURL(`/keys/${this.pkh}`),\n        method: 'GET',\n        headers: this.options.headers,\n      });\n      return public_key;\n    } catch (ex) {\n      if (ex instanceof HttpResponseError) {\n        if (ex.status === STATUS_CODE.NOT_FOUND) {\n          throw new KeyNotFoundError(`Key not found: ${this.pkh}`, ex);\n        }\n      }\n      throw ex;\n    }\n  }\n\n  async secretKey(): Promise<string> {\n    throw new Error('Secret key cannot be exposed');\n  }\n\n  async sign(bytes: string, watermark?: Uint8Array) {\n    try {\n      let bb = hex2buf(bytes);\n      if (typeof watermark !== 'undefined') {\n        bb = mergebuf(watermark, bb);\n      }\n      const watermarkedBytes = buf2hex(toBuffer(bb));\n      const { signature } = await this.http.createRequest<SignResponse>(\n        {\n          url: this.createURL(`/keys/${this.pkh}`),\n          method: 'POST',\n          headers: this.options.headers,\n        },\n        watermarkedBytes\n      );\n      let pref = signature.startsWith('sig')\n        ? signature.substring(0, 3)\n        : signature.substring(0, 5);\n\n      if (!isValidPrefix(pref)) {\n        throw new Error(`Unsupported signature given by remote signer: ${signature}`);\n      }\n\n      const decoded = b58cdecode(signature, prefix[pref]);\n\n      const signatureVerified = await this.verify(watermarkedBytes, signature);\n      if (!signatureVerified) {\n        throw new Error(\n          `Signature failed verification against public key:\n          {\n            bytes: ${watermarkedBytes},\n            signature: ${signature}\n          }`\n        );\n      }\n\n      return {\n        bytes,\n        sig: b58cencode(decoded, prefix.sig),\n        prefixSig: signature,\n        sbytes: bytes + buf2hex(toBuffer(decoded)),\n      };\n    } catch (ex) {\n      if (ex instanceof HttpResponseError) {\n        if (ex.status === STATUS_CODE.NOT_FOUND) {\n          throw new KeyNotFoundError(`Key not found: ${this.pkh}`, ex);\n        } else if (ex.status === STATUS_CODE.FORBIDDEN) {\n          throw new OperationNotAuthorizedError('Signing Operation not authorized', ex);\n        } else if (ex.status === STATUS_CODE.BAD_REQUEST) {\n          throw new BadSigningDataError('Invalid data', ex, {\n            bytes,\n            watermark,\n          });\n        }\n      }\n      throw ex;\n    }\n  }\n\n  async verify(bytes: string, signature: string): Promise<boolean> {\n    await sodium.ready;\n    const publicKey = await this.publicKey();\n    const curve = publicKey.substring(0, 2) as curves;\n    const _publicKey = toBuffer(b58cdecode(publicKey, pref[curve].pk));\n\n    let signaturePrefix = signature.startsWith('sig')\n      ? signature.substr(0, 3)\n      : signature.substr(0, 5);\n\n    if (!isValidPrefix(signaturePrefix)) {\n      throw new Error(`Unsupported signature given by remote signer: ${signature}`);\n    }\n\n    const publicKeyHash = b58cencode(sodium.crypto_generichash(20, _publicKey), pref[curve].pkh);\n    if (publicKeyHash !== this.pkh) {\n      throw new Error(\n        `Requested public key does not match the initialized public key hash: {\n          publicKey: ${publicKey},\n          publicKeyHash: ${this.pkh}\n        }`\n      );\n    }\n\n    let sig;\n    if (signature.substring(0, 3) === 'sig') {\n      sig = b58cdecode(signature, prefix.sig);\n    } else if (signature.substring(0, 5) === `${curve}sig`) {\n      sig = b58cdecode(signature, pref[curve].sig);\n    } else {\n      throw new Error(`Invalid signature provided: ${signature}`);\n    }\n\n    const bytesHash = sodium.crypto_generichash(32, hex2buf(bytes));\n\n    if (curve === 'ed') {\n      try {\n        return sodium.crypto_sign_verify_detached(sig, bytesHash, _publicKey);\n      } catch (e) {\n        return false;\n      }\n    }\n\n    if (curve === 'sp') {\n      const key = new elliptic.ec('secp256k1').keyFromPublic(_publicKey);\n      const hexSig = buf2hex(toBuffer(sig));\n      const match = hexSig.match(/([a-f\\d]{64})/gi);\n      if (match) {\n        try {\n          const [r, s] = match;\n          return key.verify(bytesHash, { r, s });\n        } catch (e) {\n          return false;\n        }\n      }\n      return false;\n    }\n\n    if (curve === 'p2') {\n      const key = new elliptic.ec('p256').keyFromPublic(_publicKey);\n      const hexSig = buf2hex(toBuffer(sig));\n      const match = hexSig.match(/([a-f\\d]{64})/gi);\n      if (match) {\n        try {\n          const [r, s] = match;\n          return key.verify(bytesHash, { r, s });\n        } catch (e) {\n          return false;\n        }\n      }\n      return false;\n    }\n\n    throw new Error(`Curve '${curve}' not supported`);\n  }\n}\n"],"names":["prefix","HttpBackend","HttpResponseError","STATUS_CODE","hex2buf","mergebuf","buf2hex","toBuffer","isValidPrefix","b58cdecode","b58cencode","sodium","elliptic"],"mappings":"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"}