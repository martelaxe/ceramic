{"version":3,"file":"taquito-remote-signer.es5.js","sources":["../src/errors.ts","../src/version.ts","../src/taquito-remote-signer.ts"],"sourcesContent":["export class KeyNotFoundError implements Error {\n  public name: string = 'KeyNotFoundError';\n  constructor(public message: string, public innerException: any) {}\n}\n\nexport class OperationNotAuthorizedError implements Error {\n  public name: string = 'OperationNotAuthorized';\n  constructor(public message: string, public innerException: any) {}\n}\n\nexport class BadSigningDataError implements Error {\n  public name: string = 'BadSigningData';\n  constructor(public message: string, public innerException: any, public readonly data: any) {}\n}\n","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n/* tslint:disable */\nexport const VERSION = {\n    \"commitHash\": \"a8e9548e650215186f661033b59299ace72c9ee6\",\n    \"version\": \"9.2.0\"\n};\n/* tslint:enable */\n","/**\n * @packageDocumentation\n * @module @taquito/remote-signer\n */\nimport { HttpBackend, HttpResponseError, STATUS_CODE } from '@taquito/http-utils';\nimport {\n  b58cdecode,\n  b58cencode,\n  buf2hex,\n  hex2buf,\n  isValidPrefix,\n  mergebuf,\n  prefix,\n} from '@taquito/utils';\nimport sodium from 'libsodium-wrappers';\nimport elliptic from 'elliptic';\nimport toBuffer from 'typedarray-to-buffer';\nimport { BadSigningDataError, KeyNotFoundError, OperationNotAuthorizedError } from './errors';\nimport { Signer } from '@taquito/taquito';\ninterface PublicKeyResponse {\n  public_key: string;\n}\n\ninterface SignResponse {\n  signature: string;\n}\n\ntype curves = 'ed' | 'p2' | 'sp';\n\nexport interface RemoteSignerOptions {\n  headers?: { [key: string]: string };\n}\n\nexport { VERSION } from './version';\n\nconst pref = {\n  ed: {\n    pk: prefix['edpk'],\n    sk: prefix['edsk'],\n    pkh: prefix.tz1,\n    sig: prefix.edsig,\n  },\n  p2: {\n    pk: prefix['p2pk'],\n    sk: prefix['p2sk'],\n    pkh: prefix.tz3,\n    sig: prefix.p2sig,\n  },\n  sp: {\n    pk: prefix['sppk'],\n    sk: prefix['spsk'],\n    pkh: prefix.tz2,\n    sig: prefix.spsig,\n  },\n};\n\nexport class RemoteSigner implements Signer {\n  constructor(\n    private pkh: string,\n    private rootUrl: string,\n    private options: RemoteSignerOptions = {},\n    private http = new HttpBackend()\n  ) {}\n\n  async publicKeyHash(): Promise<string> {\n    return this.pkh;\n  }\n\n  private createURL(path: string) {\n    // Trim trailing slashes because it is assumed to be included in path\n    return `${this.rootUrl.replace(/\\/+$/g, '')}${path}`;\n  }\n\n  async publicKey(): Promise<string> {\n    try {\n      const { public_key } = await this.http.createRequest<PublicKeyResponse>({\n        url: this.createURL(`/keys/${this.pkh}`),\n        method: 'GET',\n        headers: this.options.headers,\n      });\n      return public_key;\n    } catch (ex) {\n      if (ex instanceof HttpResponseError) {\n        if (ex.status === STATUS_CODE.NOT_FOUND) {\n          throw new KeyNotFoundError(`Key not found: ${this.pkh}`, ex);\n        }\n      }\n      throw ex;\n    }\n  }\n\n  async secretKey(): Promise<string> {\n    throw new Error('Secret key cannot be exposed');\n  }\n\n  async sign(bytes: string, watermark?: Uint8Array) {\n    try {\n      let bb = hex2buf(bytes);\n      if (typeof watermark !== 'undefined') {\n        bb = mergebuf(watermark, bb);\n      }\n      const watermarkedBytes = buf2hex(toBuffer(bb));\n      const { signature } = await this.http.createRequest<SignResponse>(\n        {\n          url: this.createURL(`/keys/${this.pkh}`),\n          method: 'POST',\n          headers: this.options.headers,\n        },\n        watermarkedBytes\n      );\n      let pref = signature.startsWith('sig')\n        ? signature.substring(0, 3)\n        : signature.substring(0, 5);\n\n      if (!isValidPrefix(pref)) {\n        throw new Error(`Unsupported signature given by remote signer: ${signature}`);\n      }\n\n      const decoded = b58cdecode(signature, prefix[pref]);\n\n      const signatureVerified = await this.verify(watermarkedBytes, signature);\n      if (!signatureVerified) {\n        throw new Error(\n          `Signature failed verification against public key:\n          {\n            bytes: ${watermarkedBytes},\n            signature: ${signature}\n          }`\n        );\n      }\n\n      return {\n        bytes,\n        sig: b58cencode(decoded, prefix.sig),\n        prefixSig: signature,\n        sbytes: bytes + buf2hex(toBuffer(decoded)),\n      };\n    } catch (ex) {\n      if (ex instanceof HttpResponseError) {\n        if (ex.status === STATUS_CODE.NOT_FOUND) {\n          throw new KeyNotFoundError(`Key not found: ${this.pkh}`, ex);\n        } else if (ex.status === STATUS_CODE.FORBIDDEN) {\n          throw new OperationNotAuthorizedError('Signing Operation not authorized', ex);\n        } else if (ex.status === STATUS_CODE.BAD_REQUEST) {\n          throw new BadSigningDataError('Invalid data', ex, {\n            bytes,\n            watermark,\n          });\n        }\n      }\n      throw ex;\n    }\n  }\n\n  async verify(bytes: string, signature: string): Promise<boolean> {\n    await sodium.ready;\n    const publicKey = await this.publicKey();\n    const curve = publicKey.substring(0, 2) as curves;\n    const _publicKey = toBuffer(b58cdecode(publicKey, pref[curve].pk));\n\n    let signaturePrefix = signature.startsWith('sig')\n      ? signature.substr(0, 3)\n      : signature.substr(0, 5);\n\n    if (!isValidPrefix(signaturePrefix)) {\n      throw new Error(`Unsupported signature given by remote signer: ${signature}`);\n    }\n\n    const publicKeyHash = b58cencode(sodium.crypto_generichash(20, _publicKey), pref[curve].pkh);\n    if (publicKeyHash !== this.pkh) {\n      throw new Error(\n        `Requested public key does not match the initialized public key hash: {\n          publicKey: ${publicKey},\n          publicKeyHash: ${this.pkh}\n        }`\n      );\n    }\n\n    let sig;\n    if (signature.substring(0, 3) === 'sig') {\n      sig = b58cdecode(signature, prefix.sig);\n    } else if (signature.substring(0, 5) === `${curve}sig`) {\n      sig = b58cdecode(signature, pref[curve].sig);\n    } else {\n      throw new Error(`Invalid signature provided: ${signature}`);\n    }\n\n    const bytesHash = sodium.crypto_generichash(32, hex2buf(bytes));\n\n    if (curve === 'ed') {\n      try {\n        return sodium.crypto_sign_verify_detached(sig, bytesHash, _publicKey);\n      } catch (e) {\n        return false;\n      }\n    }\n\n    if (curve === 'sp') {\n      const key = new elliptic.ec('secp256k1').keyFromPublic(_publicKey);\n      const hexSig = buf2hex(toBuffer(sig));\n      const match = hexSig.match(/([a-f\\d]{64})/gi);\n      if (match) {\n        try {\n          const [r, s] = match;\n          return key.verify(bytesHash, { r, s });\n        } catch (e) {\n          return false;\n        }\n      }\n      return false;\n    }\n\n    if (curve === 'p2') {\n      const key = new elliptic.ec('p256').keyFromPublic(_publicKey);\n      const hexSig = buf2hex(toBuffer(sig));\n      const match = hexSig.match(/([a-f\\d]{64})/gi);\n      if (match) {\n        try {\n          const [r, s] = match;\n          return key.verify(bytesHash, { r, s });\n        } catch (e) {\n          return false;\n        }\n      }\n      return false;\n    }\n\n    throw new Error(`Curve '${curve}' not supported`);\n  }\n}\n"],"names":[],"mappings":"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"}