{"version":3,"file":"lib.cjs","sources":["../src/utils.ts","../src/encoding.ts","../src/publishing.ts","../src/schema.ts","../src/datamodel.ts","../src/graphql.ts","../src/validation.ts"],"sourcesContent":["import type { StreamRef } from '@ceramicnetwork/streamid'\n\n/** @internal */\nexport function streamIDToString(id: StreamRef | string): string {\n  return typeof id === 'string' ? id : id.toString()\n}\n\n/** @internal */\nexport function applyMap<\n  M extends Record<string, unknown>,\n  V extends M[keyof M] = M[keyof M],\n  R = unknown\n>(inputs: M, callFunc: (input: V) => R): Record<keyof M, R> {\n  return Object.entries(inputs).reduce((acc, [key, value]) => {\n    acc[key as keyof M] = callFunc(value as V)\n    return acc\n  }, {} as Record<keyof M, R>)\n}\n\n/** @internal */\nexport async function promiseMap<\n  M extends Record<string, unknown>,\n  V extends M[keyof M] = M[keyof M],\n  R = unknown\n>(inputs: M, callFunc: (input: V) => Promise<R>): Promise<Record<keyof M, R>> {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  const results = await Promise.all(Object.values(inputs).map((value) => callFunc(value as any)))\n  return Object.keys(inputs).reduce((acc, key, i) => {\n    acc[key as keyof M] = results[i]\n    return acc\n  }, {} as Record<keyof M, R>)\n}\n","import type { EncodedDagJWS, EncodedDagJWSResult, ManagedEntry, ManagedModel } from '@glazed/types'\nimport CID from 'cids'\nimport type { DagJWS, DagJWSResult } from 'dids'\nimport { fromString, toString } from 'uint8arrays'\n\nimport { applyMap } from './utils'\n\n/** @internal */\nexport function decodeDagJWS({ payload, signatures, link }: EncodedDagJWS): DagJWS {\n  return { payload, signatures, link: link ? new CID(link) : undefined }\n}\n\n/** @internal */\nexport function encodeDagJWS({ payload, signatures, link }: DagJWS): EncodedDagJWS {\n  return { payload, signatures, link: link?.toString() }\n}\n\n/** @internal */\nexport function decodeDagJWSResult({ jws, linkedBlock }: EncodedDagJWSResult): DagJWSResult {\n  return { jws: decodeDagJWS(jws), linkedBlock: fromString(linkedBlock, 'base64pad') }\n}\n\n/** @internal */\nexport function encodeDagJWSResult({ jws, linkedBlock }: DagJWSResult): EncodedDagJWSResult {\n  return { jws: encodeDagJWS(jws), linkedBlock: toString(linkedBlock, 'base64pad') }\n}\n\n/** @internal */\nexport function decodeSignedMap<K extends string>(\n  data: Record<K, Array<EncodedDagJWSResult>>\n): Record<K, Array<DagJWSResult>> {\n  return applyMap(data, (records) => records.map(decodeDagJWSResult))\n}\n\n/** @internal */\nexport function encodeSignedMap<K extends string>(\n  data: Record<K, Array<DagJWSResult>>\n): Record<K, Array<EncodedDagJWSResult>> {\n  return applyMap(data, (records) => records.map(encodeDagJWSResult))\n}\n\n/** @internal */\nexport function decodeEntryCommits(\n  entry: ManagedEntry<EncodedDagJWSResult>\n): ManagedEntry<DagJWSResult> {\n  return { ...entry, commits: entry.commits.map(decodeDagJWSResult) }\n}\n\n/** @internal */\nexport function decodeModel(model: ManagedModel<EncodedDagJWSResult>): ManagedModel<DagJWSResult> {\n  return {\n    schemas: applyMap(model.schemas, (schema) => {\n      return { ...schema, commits: schema.commits.map(decodeDagJWSResult) }\n    }),\n    definitions: applyMap(model.definitions, decodeEntryCommits),\n    tiles: applyMap(model.tiles, decodeEntryCommits),\n  }\n}\n\n/** @internal */\nexport function encodeEntryCommits(\n  entry: ManagedEntry<DagJWSResult>\n): ManagedEntry<EncodedDagJWSResult> {\n  return { ...entry, commits: entry.commits.map(encodeDagJWSResult) }\n}\n\n/** @internal */\nexport function encodeModel(model: ManagedModel<DagJWSResult>): ManagedModel<EncodedDagJWSResult> {\n  return {\n    schemas: applyMap(model.schemas, (schema) => {\n      return { ...schema, commits: schema.commits.map(encodeDagJWSResult) }\n    }),\n    definitions: applyMap(model.definitions, encodeEntryCommits),\n    tiles: applyMap(model.tiles, encodeEntryCommits),\n  }\n}\n","import type {\n  CeramicApi,\n  CeramicCommit,\n  GenesisCommit,\n  StreamMetadata,\n} from '@ceramicnetwork/common'\nimport { TileDocument } from '@ceramicnetwork/stream-tile'\n\nimport { promiseMap } from './utils'\n\nconst PUBLISH_OPTS = { anchor: false }\n\n/** @internal */\nexport async function createModelDoc<T = Record<string, any>>(\n  ceramic: CeramicApi,\n  content: T,\n  metadata: Partial<StreamMetadata> = {}\n): Promise<TileDocument<T>> {\n  const doc = await TileDocument.create<T>(ceramic, content, metadata, PUBLISH_OPTS)\n  await ceramic.pin.add(doc.id)\n  return doc\n}\n\n/** @internal */\nexport async function publishCommits(\n  ceramic: CeramicApi,\n  [genesis, ...updates]: Array<CeramicCommit>\n): Promise<TileDocument<Record<string, any>>> {\n  const doc = await TileDocument.createFromGenesis<TileDocument<Record<string, any>>>(\n    ceramic,\n    genesis as GenesisCommit,\n    PUBLISH_OPTS\n  )\n  await ceramic.pin.add(doc.id)\n  for (const commit of updates) {\n    await ceramic.applyCommit(doc.id, commit, PUBLISH_OPTS)\n  }\n  return doc\n}\n\n/** @internal */\nexport async function publishSignedMap<T extends string = string>(\n  ceramic: CeramicApi,\n  signed: Record<T, Array<CeramicCommit>>\n): Promise<Record<T, TileDocument>> {\n  return await promiseMap(signed, async (commits) => await publishCommits(ceramic, commits))\n}\n","import { CIP88_REF_PREFIX } from '@glazed/constants'\nimport type { Schema } from '@glazed/types'\n\n/** @internal */\nexport function getReference(schema: Schema): Array<string> | null {\n  if (schema.$comment?.startsWith(CIP88_REF_PREFIX)) {\n    const schemasString = schema.$comment.substr(CIP88_REF_PREFIX.length)\n    if (schemasString.length) {\n      const schemas = schemasString.split('|')\n      schemas.sort()\n      return schemas\n    }\n  }\n  return null\n}\n\n/**\n * Recursively extract references to other schemas from a JSON schema arrays and objects\n *\n * @internal */\nexport function extractSchemaReferences(schema: Schema, path = ''): Record<string, Array<string>> {\n  if (schema.type === 'string') {\n    const refs = getReference(schema)\n    return refs != null && refs.length > 0 ? { [path]: refs } : {}\n  }\n  if (schema.type === 'array') {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return extractSchemaReferences(schema.items, path)\n  }\n  if (schema.type === 'object' && schema.properties != null) {\n    // TODO: extract collection slice schema URL\n    return Object.entries(schema.properties as Record<string, Schema>).reduce(\n      (acc, [key, prop]) => {\n        const propPath = path === '' ? key : `${path}.${key}`\n        return Object.assign(acc, extractSchemaReferences(prop, propPath))\n      },\n      {} as Record<string, Array<string>>\n    )\n  }\n  return {}\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access */\n\nimport type { CeramicApi, StreamMetadata } from '@ceramicnetwork/common'\nimport { CommitID, StreamID, StreamRef } from '@ceramicnetwork/streamid'\nimport { TileDocument } from '@ceramicnetwork/stream-tile'\nimport { CIP11_DEFINITION_SCHEMA_URL } from '@glazed/constants'\nimport type { Definition } from '@glazed/did-datastore-model'\nimport { model as encodedDataStoreModel } from '@glazed/did-datastore-model'\nimport type {\n  EncodedManagedModel,\n  ManagedEntry,\n  ManagedID,\n  ManagedModel,\n  ManagedSchema,\n  ModelData,\n  PublishedModel,\n  Schema,\n} from '@glazed/types'\nimport type { DagJWSResult } from 'dids'\n\nimport { decodeModel, encodeModel } from './encoding'\nimport { createModelDoc, publishCommits } from './publishing'\nimport { extractSchemaReferences } from './schema'\n\ntype ManagedReferenced = {\n  definitions: Set<ManagedID>\n  schemas: Set<ManagedID>\n  tiles: Set<ManagedID>\n}\n\ntype CreateContentType = {\n  definition: Definition\n  schema: Schema\n  tile: Record<string, unknown>\n}\n\ntype UsePublishedIDType = {\n  definition: StreamID | string\n  schema: StreamRef | string\n  tile: StreamID | string\n}\n\nfunction getManagedIDAndVersion(id: StreamRef | string): [ManagedID, string | null] {\n  const streamID = typeof id === 'string' ? StreamRef.from(id) : id\n  return [streamID.baseID.toString(), CommitID.isInstance(streamID) ? streamID.toString() : null]\n}\n\nfunction getManagedID(id: StreamRef | string): ManagedID {\n  const streamID = typeof id === 'string' ? StreamRef.from(id) : id\n  return streamID.baseID.toString()\n}\n\nfunction isSupportedDID(did: string): boolean {\n  return did.startsWith('did:key')\n}\n\nfunction docHasSupportedDID(doc: TileDocument<any>): boolean {\n  return isSupportedDID(doc.metadata.controllers[0])\n}\n\nconst dataStoreModel = decodeModel(encodedDataStoreModel)\n/** @internal */\nexport async function publishDataStoreSchemas(ceramic: CeramicApi): Promise<void> {\n  await Promise.all(\n    Object.values(dataStoreModel.schemas).map(async (schema) => {\n      return await publishCommits(ceramic, schema.commits)\n    })\n  )\n}\n\n// Publish a managed model to the given Ceramic node\nexport async function publishModel(\n  ceramic: CeramicApi,\n  model: ManagedModel\n): Promise<PublishedModel> {\n  const [schemas] = await Promise.all([\n    Promise.all(\n      Object.values(model.schemas).map(async (schema) => {\n        const stream = await publishCommits(ceramic, schema.commits)\n        return [schema.alias, stream.commitId.toUrl()]\n      })\n    ),\n    publishDataStoreSchemas(ceramic),\n  ])\n  const [definitions, tiles] = await Promise.all([\n    await Promise.all(\n      Object.values(model.definitions).map(async (entry) => {\n        const stream = await publishCommits(ceramic, entry.commits)\n        return [entry.alias, stream.id.toString()]\n      })\n    ),\n    await Promise.all(\n      Object.values(model.tiles).map(async (entry) => {\n        const stream = await publishCommits(ceramic, entry.commits)\n        return [entry.alias, stream.id.toString()]\n      })\n    ),\n  ])\n  return {\n    definitions: Object.fromEntries(definitions),\n    schemas: Object.fromEntries(schemas),\n    tiles: Object.fromEntries(tiles),\n  }\n}\n\n// Publish a JSON-encoded managed model to the given Ceramic node\nexport async function publishEncodedModel(\n  ceramic: CeramicApi,\n  model: EncodedManagedModel\n): Promise<PublishedModel> {\n  return await publishModel(ceramic, decodeModel(model))\n}\n\n/**\n * ```sh\n * import { ModelManager } from '@glazed/devtools'\n * ```\n */\nexport class ModelManager {\n  public static fromJSON(ceramic: CeramicApi, encoded: EncodedManagedModel): ModelManager {\n    return new ModelManager(ceramic, decodeModel(encoded))\n  }\n\n  #aliases: ModelData<string> = {\n    definitions: {},\n    schemas: {},\n    tiles: {},\n  }\n  #ceramic: CeramicApi\n  #model: ManagedModel = {\n    definitions: {},\n    schemas: {},\n    tiles: {},\n  }\n  #referenced: Record<ManagedID, ManagedReferenced> = {}\n  #streams: Record<ManagedID, Promise<TileDocument>> = {}\n\n  constructor(ceramic: CeramicApi, model?: ManagedModel) {\n    this.#ceramic = ceramic\n    if (model != null) {\n      this.addModel(model)\n    }\n  }\n\n  // Getters\n\n  get model(): ManagedModel {\n    return this.#model\n  }\n\n  get schemas(): Array<string> {\n    return Object.keys(this.#aliases.schemas).sort()\n  }\n\n  get definitions(): Array<string> {\n    return Object.keys(this.#aliases.definitions).sort()\n  }\n\n  get tiles(): Array<string> {\n    return Object.keys(this.#aliases.tiles).sort()\n  }\n\n  // Imports\n\n  addModel(model: ManagedModel): void {\n    Object.assign(this.#model.definitions, model.definitions)\n    Object.assign(this.#model.schemas, model.schemas)\n    Object.assign(this.#model.tiles, model.tiles)\n\n    for (const [id, schema] of Object.entries(model.schemas)) {\n      this.#aliases.schemas[schema.alias] = id\n      for (const refIDs of Object.values(schema.dependencies)) {\n        for (const refID of refIDs) {\n          if (this.#referenced[refID] == null) {\n            this.#referenced[refID] = {\n              definitions: new Set<ManagedID>(),\n              schemas: new Set<ManagedID>(),\n              tiles: new Set<ManagedID>(),\n            }\n          }\n          this.#referenced[refID].schemas.add(id)\n        }\n      }\n    }\n    for (const [id, definition] of Object.entries(model.definitions)) {\n      this.#aliases.definitions[definition.alias] = id\n      if (this.#referenced[definition.schema] == null) {\n        this.#referenced[definition.schema] = {\n          definitions: new Set<ManagedID>(),\n          schemas: new Set<ManagedID>(),\n          tiles: new Set<ManagedID>(),\n        }\n      }\n      this.#referenced[definition.schema].definitions.add(id)\n    }\n    for (const [id, tile] of Object.entries(model.tiles)) {\n      this.#aliases.tiles[tile.alias] = id\n      if (this.#referenced[tile.schema] == null) {\n        this.#referenced[tile.schema] = {\n          definitions: new Set<ManagedID>(),\n          schemas: new Set<ManagedID>(),\n          tiles: new Set<ManagedID>(),\n        }\n      }\n      this.#referenced[tile.schema].tiles.add(id)\n    }\n  }\n\n  addJSONModel(encoded: EncodedManagedModel): void {\n    this.addModel(decodeModel(encoded))\n  }\n\n  // Loaders\n\n  async loadStream(streamID: StreamRef | string): Promise<TileDocument> {\n    const id = typeof streamID === 'string' ? streamID : streamID.baseID.toString()\n    if (this.#streams[id] == null) {\n      this.#streams[id] = this._loadAndValidateStream(id)\n    }\n    return await this.#streams[id]\n  }\n\n  /** @internal */\n  async _loadAndValidateStream(id: string): Promise<TileDocument> {\n    const stream = await TileDocument.load<Record<string, any>>(this.#ceramic, id)\n    if (stream.anchorCommitIds.length !== 0) {\n      throw new Error(`Invalid stream ${id}: contains anchor commit`)\n    }\n\n    // Shortcut logic for single commit\n    if (stream.allCommitIds.length === 1 && docHasSupportedDID(stream)) {\n      return stream\n    }\n\n    const commits = await Promise.all(\n      stream.allCommitIds.map(async (commitID) => {\n        return await TileDocument.load(this.#ceramic, commitID)\n      })\n    )\n    const unsupported = commits.find((commit) => !docHasSupportedDID(commit))\n    if (unsupported != null) {\n      throw new Error(`Invalid stream ${id}: contains a commit authored by an unsupported DID`)\n    }\n\n    return stream\n  }\n\n  async loadCommits(id: ManagedID): Promise<Array<DagJWSResult>> {\n    const commits = await this.#ceramic.loadStreamCommits(id)\n    return commits.map((r) => r.value as DagJWSResult)\n  }\n\n  async loadSchema(id: StreamRef | string, alias?: string): Promise<ManagedID> {\n    const [managedID, commitID] = getManagedIDAndVersion(id)\n    if (commitID === null) {\n      throw new Error(`Expected CommitID to load schema: ${managedID}`)\n    }\n\n    const existing = this.#model.schemas[managedID]\n    if (existing != null) {\n      if (existing.version !== commitID) {\n        throw new Error(`Another version for this schema is already set: ${existing.version}`)\n      }\n      if (alias != null && existing.alias !== alias) {\n        throw new Error(`Another alias for this schema is already set: ${existing.alias}`)\n      }\n      return managedID\n    }\n\n    const [stream, commits] = await Promise.all([\n      this.loadStream(commitID),\n      this.loadCommits(managedID),\n    ])\n    const content = (stream.content ?? {}) as Schema\n    const name = alias ?? content.title\n    if (name == null) {\n      throw new Error('Schema must have a title property or an alias must be provided')\n    }\n\n    const dependencies = await this.loadSchemaDependencies(content)\n    this.#model.schemas[managedID] = { alias: name, commits, dependencies, version: commitID }\n    this.#aliases.schemas[name] = managedID\n\n    return managedID\n  }\n\n  async loadSchemaDependencies(schema: Schema): Promise<Record<string, Array<string>>> {\n    const references = extractSchemaReferences(schema)\n\n    const ids = new Set<string>()\n    for (const refs of Object.values(references)) {\n      for (const ref of refs) {\n        ids.add(ref)\n      }\n    }\n    const loaded = await Promise.all(\n      Array.from(ids).map(async (id) => [id, await this.loadSchema(id)])\n    )\n    const idToManaged: Record<string, string> = Object.fromEntries(loaded)\n\n    return Object.entries(references).reduce((acc, [path, deps]) => {\n      acc[path] = deps.map((id) => idToManaged[id])\n      return acc\n    }, {} as Record<string, Array<string>>)\n  }\n\n  // High-level\n\n  async create<T extends keyof CreateContentType, Content = CreateContentType[T]>(\n    type: T,\n    alias: string,\n    content: Content,\n    meta?: Partial<StreamMetadata>\n  ): Promise<ManagedID> {\n    switch (type) {\n      case 'schema':\n        return await this.createSchema(alias, content as any)\n      case 'definition':\n        return await this.createDefinition(alias, content as any)\n      case 'tile':\n        return await this.createTile(alias, content as any, meta)\n      default:\n        throw new Error(`Unsupported type: ${type as string}`)\n    }\n  }\n\n  async usePublished<T extends keyof UsePublishedIDType, ID = UsePublishedIDType[T]>(\n    type: T,\n    alias: string,\n    id: ID\n  ): Promise<ManagedID> {\n    switch (type) {\n      case 'schema':\n        return await this.usePublishedSchema(alias, id as any)\n      case 'definition':\n        return await this.usePublishedDefinition(alias, id as any)\n      case 'tile':\n        return await this.usePublishedTile(alias, id as any)\n      default:\n        throw new Error(`Unsupported type: ${type as string}`)\n    }\n  }\n\n  // Schemas\n\n  getSchemaID(alias: string): ManagedID | null {\n    return this.#aliases.schemas[alias] ?? null\n  }\n\n  hasSchemaAlias(alias: string): boolean {\n    return this.getSchemaID(alias) != null\n  }\n\n  getSchema(id: ManagedID): ManagedSchema | null {\n    return this.#model.schemas[id] ?? null\n  }\n\n  getSchemaURL(id: ManagedID): string | null {\n    const schema = this.#model.schemas[id]\n    return schema ? CommitID.fromString(schema.version).toUrl() : null\n  }\n\n  getSchemaByAlias(alias: string): ManagedSchema | null {\n    const id = this.getSchemaID(alias)\n    return id ? this.getSchema(id) : null\n  }\n\n  async createSchema(alias: string, schema: Schema): Promise<ManagedID> {\n    if (this.#ceramic.did == null || !this.#ceramic.did.authenticated) {\n      throw new Error('Ceramic instance must be authenticated')\n    }\n    if (!isSupportedDID(this.#ceramic.did.id)) {\n      throw new Error(\n        `Invalid DID ${\n          this.#ceramic.did.id\n        } to create stream for model, only \"did:key\" is supported`\n      )\n    }\n    if (this.hasSchemaAlias(alias)) {\n      throw new Error(`Schema ${alias} already exists`)\n    }\n\n    const [stream, dependencies] = await Promise.all([\n      createModelDoc(this.#ceramic, schema),\n      this.loadSchemaDependencies(schema),\n    ])\n\n    const id = stream.id.toString()\n    this.#model.schemas[id] = {\n      alias,\n      commits: await this.loadCommits(id),\n      dependencies,\n      version: stream.commitId.toString(),\n    }\n    this.#aliases.schemas[alias] = id\n\n    return id\n  }\n\n  async usePublishedSchema(alias: string, id: StreamRef | string): Promise<ManagedID> {\n    if (alias == null) {\n      throw new Error('Schema alias must be provided')\n    }\n    return await this.loadSchema(id, alias)\n  }\n\n  // Definitions\n\n  getDefinitionID(alias: string): ManagedID | null {\n    return this.#aliases.definitions[alias] ?? null\n  }\n\n  hasDefinitionAlias(alias: string): boolean {\n    return this.getDefinitionID(alias) != null\n  }\n\n  getDefinition(id: ManagedID): ManagedEntry | null {\n    return this.#model.definitions[id] ?? null\n  }\n\n  async createDefinition(alias: string, definition: Definition): Promise<ManagedID> {\n    if (this.#ceramic.did == null || !this.#ceramic.did.authenticated) {\n      throw new Error('Ceramic instance must be authenticated')\n    }\n    if (!isSupportedDID(this.#ceramic.did.id)) {\n      throw new Error(\n        `Invalid DID ${\n          this.#ceramic.did.id\n        } to create stream for model, only \"did:key\" is supported`\n      )\n    }\n    if (this.hasDefinitionAlias(alias)) {\n      throw new Error(`Definition ${alias} already exists`)\n    }\n\n    await publishDataStoreSchemas(this.#ceramic)\n    const [stream, schemaID] = await Promise.all([\n      createModelDoc(this.#ceramic, definition, { schema: CIP11_DEFINITION_SCHEMA_URL }),\n      this.loadSchema(definition.schema),\n    ])\n\n    const id = stream.id.toString()\n    this.#model.definitions[id] = {\n      alias,\n      commits: await this.loadCommits(id),\n      schema: schemaID,\n      version: stream.commitId.toString(),\n    }\n    this.#aliases.definitions[alias] = id\n\n    return id\n  }\n\n  async usePublishedDefinition(alias: string, id: StreamID | string): Promise<ManagedID> {\n    if (this.hasDefinitionAlias(alias)) {\n      throw new Error(`Definition ${alias} already exists`)\n    }\n\n    const definitionID = getManagedID(id)\n    const [stream, commits] = await Promise.all([\n      this.loadStream(id),\n      this.loadCommits(definitionID),\n    ])\n\n    this.#model.definitions[definitionID] = {\n      alias,\n      commits,\n      schema: await this.loadSchema((stream.content as Definition).schema),\n      version: stream.commitId.toString(),\n    }\n    this.#aliases.definitions[alias] = definitionID\n\n    return definitionID\n  }\n\n  // Tiles\n\n  getTileID(alias: string): ManagedID | null {\n    return this.#aliases.tiles[alias] ?? null\n  }\n\n  hasTileAlias(alias: string): boolean {\n    return this.getTileID(alias) != null\n  }\n\n  getTile(id: ManagedID): ManagedEntry | null {\n    return this.#model.tiles[id] ?? null\n  }\n\n  async createTile<T extends Record<string, unknown>>(\n    alias: string,\n    contents: T,\n    meta: Partial<StreamMetadata> = {}\n  ): Promise<ManagedID> {\n    if (this.#ceramic.did == null || !this.#ceramic.did.authenticated) {\n      throw new Error('Ceramic instance must be authenticated')\n    }\n    if (!isSupportedDID(this.#ceramic.did.id)) {\n      throw new Error('Unsupported DID to create stream for model')\n    }\n    if (this.hasTileAlias(alias)) {\n      throw new Error(`Tile ${alias} already exists`)\n    }\n    if (meta.schema == null) {\n      throw new Error(`Missing schema to create tile ${alias}`)\n    }\n\n    const [stream, schemaID] = await Promise.all([\n      createModelDoc(this.#ceramic, contents, meta),\n      this.loadSchema(meta.schema),\n    ])\n\n    const id = stream.id.toString()\n    this.#model.tiles[id] = {\n      alias,\n      commits: await this.loadCommits(id),\n      schema: schemaID,\n      version: stream.commitId.toString(),\n    }\n    this.#aliases.tiles[alias] = id\n\n    return id\n  }\n\n  async usePublishedTile(alias: string, id: StreamID | string): Promise<ManagedID> {\n    if (this.hasTileAlias(alias)) {\n      throw new Error(`Tile ${alias} already exists`)\n    }\n\n    const tileID = getManagedID(id)\n    const [stream, commits] = await Promise.all([this.loadStream(id), this.loadCommits(tileID)])\n    if (stream.metadata.schema == null) {\n      throw new Error('Loaded tile has no schema defined')\n    }\n\n    this.#model.tiles[tileID] = {\n      alias,\n      commits,\n      schema: await this.loadSchema(stream.metadata.schema),\n      version: stream.commitId.toString(),\n    }\n    this.#aliases.tiles[alias] = tileID\n\n    return tileID\n  }\n\n  // Exports\n\n  async toPublished(): Promise<PublishedModel> {\n    return await publishModel(this.#ceramic, this.#model)\n  }\n\n  toJSON(): EncodedManagedModel {\n    return encodeModel(this.#model)\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access */\n\nimport { CIP88_APPEND_COLLECTION_PREFIX } from '@glazed/constants'\nimport type { Definition } from '@glazed/did-datastore-model'\nimport type { GraphQLModel, ItemField, ObjectField } from '@glazed/graphql-types'\nimport type { Schema } from '@glazed/types'\nimport { camelCase, pascalCase } from 'change-case'\n\nimport type { ModelManager } from './datamodel'\nimport { getReference } from './schema'\n\n/** @internal */\nfunction getName(base: string, prefix = ''): string {\n  const withCase = pascalCase(base)\n  return withCase.startsWith(prefix) ? withCase : prefix + withCase\n}\n\n/** @internal */\nexport function getItemField(\n  model: GraphQLModel,\n  schema: Schema,\n  parent: string,\n  owner: string\n): ItemField {\n  const name = schema.title ?? ''\n  if (schema.type === 'array') {\n    throw new Error('Unsupported item field of type array')\n  }\n  if (schema.type === 'string') {\n    const schemas = getReference(schema)\n    if (schemas == null) {\n      return { ...schema, type: 'string' }\n    }\n\n    const refName = getName(name, parent)\n    const ref = { schemas, owner }\n    model.references[refName] = ref\n    return { type: 'reference', ...ref }\n  }\n  if (schema.type === 'object') {\n    return { type: 'object', name: addModelSchema(model, schema, { name, parent, owner }) }\n  }\n  return schema as ItemField\n}\n\nexport type AddModelSchemaOptions = {\n  name?: string\n  parent?: string\n  owner?: string\n}\n\n/**\n * Add a JSON schema to the provided records based on its type\n *\n * @internal\n * */\nexport function addModelSchema(\n  model: GraphQLModel,\n  schema: Schema,\n  options: AddModelSchemaOptions = {}\n): string {\n  const providedTitle = options.name ?? schema.title\n  if (providedTitle == null) {\n    throw new Error('Schema must have a title')\n  }\n\n  // TODO: add parents?: Array<string> to options\n  // If no parent and type object, treat as node and use canonical name\n  // Make sure object doesn't already exist in model, if so just add extra parents\n  const name = getName(providedTitle, options.parent)\n\n  if (schema.type === 'string') {\n    const reference = getReference(schema)\n    if (reference != null) {\n      model.references[name] = { schemas: reference, owner: options.owner as string }\n    }\n  } else if (schema.type === 'array' && schema.items != null) {\n    model.lists[name] = getItemField(model, schema.items, name, options.owner as string)\n  } else if (schema.type === 'object' && schema.properties != null) {\n    const requiredProps = (schema.required as Array<string>) ?? []\n    const fields = Object.entries(schema.properties as Record<string, any>).reduce(\n      (acc, [key, value]: [string, Schema]) => {\n        const propName = (value.title as string) ?? key\n        const prop = camelCase(key)\n        const opts = { name: propName, parent: name, owner: options.owner ?? name }\n        const required = requiredProps.includes(key)\n        if (value.type === 'string') {\n          const reference = getReference(value)\n          if (reference == null) {\n            acc[prop] = { ...value, required, type: 'string' }\n          } else {\n            const refName = getName(propName, name)\n            const ref = { schemas: reference, owner: options.owner ?? name }\n            model.references[refName] = ref\n            acc[prop] = { required, type: 'reference', ...ref }\n          }\n        } else if (value.type === 'array') {\n          if (value.items == null) {\n            throw new Error(`Missing items in field ${key}`)\n          }\n          acc[prop] = { required, type: 'list', name: addModelSchema(model, value, opts) }\n        } else if (value.type === 'object') {\n          acc[prop] = { required, type: 'object', name: addModelSchema(model, value, opts) }\n        } else {\n          acc[prop] = { ...value, required } as ObjectField\n        }\n        return acc\n      },\n      {} as Record<string, ObjectField>\n    )\n    model.objects[name] = { fields, parents: options.parent ? [options.parent] : null }\n  }\n\n  return name\n}\n\n/** @internal */\nexport async function createGraphQLModel(manager: ModelManager): Promise<GraphQLModel> {\n  // TODO: throw error on using reserved names:\n  // - \"node\" and \"index\" roots\n  // - \"id\" field in object if node\n\n  const model: GraphQLModel = {\n    collections: {},\n    index: {},\n    lists: {},\n    objects: {},\n    referenced: {},\n    references: {},\n    roots: {},\n  }\n\n  const handleSchemas = manager.schemas.map(async (name) => {\n    const id = manager.getSchemaID(name) as string\n    const stream = await manager.loadStream(id)\n    const schema = stream.content as Schema\n    if (schema == null) {\n      throw new Error(`Could not load schema ${name}`)\n    }\n\n    const schemaURL = stream.commitId.toUrl()\n    if (schema.$comment?.startsWith(CIP88_APPEND_COLLECTION_PREFIX)) {\n      const sliceSchemaID = schema.$comment.substr(CIP88_APPEND_COLLECTION_PREFIX.length)\n      await manager.loadSchema(sliceSchemaID)\n      const sliceSchemaDoc = await manager.loadStream(sliceSchemaID)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n      const itemSchema = sliceSchemaDoc.content?.properties?.contents?.items?.oneOf?.[0]\n      if (itemSchema == null) {\n        throw new Error(`Could not extract item schema ${name}`)\n      }\n      model.collections[name] = {\n        schema: schemaURL,\n        item: getItemField(model, itemSchema, name, name),\n      }\n      model.referenced[schemaURL] = { type: 'collection', name }\n    } else {\n      model.referenced[schemaURL] = {\n        type: 'object',\n        name: addModelSchema(model, schema),\n      }\n    }\n  })\n\n  const handleDefinitions = manager.definitions.map(async (name) => {\n    const id = manager.getDefinitionID(name) as string\n    const stream = await manager.loadStream(id)\n    const definition = stream.content as Definition\n    if (definition == null) {\n      throw new Error(`Could not load definition ${name}`)\n    }\n    model.index[name] = { id: stream.id.toString(), schema: definition.schema }\n  })\n\n  const handleTiles = manager.tiles.map(async (name) => {\n    const id = manager.getTileID(name) as string\n    const stream = await manager.loadStream(id)\n    const { schema } = stream.metadata\n    if (schema == null) {\n      throw new Error(`Missing schema for tile ${name}`)\n    }\n    model.roots[name] = { id: stream.id.toString(), schema }\n  })\n\n  await Promise.all([...handleSchemas, ...handleDefinitions, ...handleTiles])\n\n  return model\n}\n","import Ajv from 'ajv'\nimport type { JSONSchemaType } from 'ajv'\nimport addFormats from 'ajv-formats'\n\n/**\n * Compile the schema from ajv/lib/refs/json-schema-secure.json, copied to avoid JSON import.\n * Seems the secure schema is not strict, this causes warnings to be logged.\n *\n * @internal */\nexport const validateSchemaSecure = new Ajv({ strict: false }).compile({\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  $id: 'https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/json-schema-secure.json#',\n  title: 'Meta-schema for the security assessment of JSON Schemas',\n  description:\n    'If a JSON AnySchema fails validation against this meta-schema, it may be unsafe to validate untrusted data',\n  definitions: {\n    schemaArray: {\n      type: 'array',\n      minItems: 1,\n      items: { $ref: '#' },\n    },\n  },\n  dependencies: {\n    patternProperties: {\n      description: 'prevent slow validation of large property names',\n      required: ['propertyNames'],\n      properties: {\n        propertyNames: {\n          required: ['maxLength'],\n        },\n      },\n    },\n    uniqueItems: {\n      description: 'prevent slow validation of large non-scalar arrays',\n      if: {\n        properties: {\n          uniqueItems: { const: true },\n          items: {\n            properties: {\n              type: {\n                anyOf: [\n                  {\n                    enum: ['object', 'array'],\n                  },\n                  {\n                    type: 'array',\n                    contains: { enum: ['object', 'array'] },\n                  },\n                ],\n              },\n            },\n          },\n        },\n      },\n      then: {\n        required: ['maxItems'],\n      },\n    },\n    pattern: {\n      description: 'prevent slow pattern matching of large strings',\n      required: ['maxLength'],\n    },\n    format: {\n      description: 'prevent slow format validation of large strings',\n      required: ['maxLength'],\n    },\n  },\n  properties: {\n    additionalItems: { $ref: '#' },\n    additionalProperties: { $ref: '#' },\n    dependencies: {\n      additionalProperties: {\n        anyOf: [{ type: 'array' }, { $ref: '#' }],\n      },\n    },\n    items: {\n      anyOf: [{ $ref: '#' }, { $ref: '#/definitions/schemaArray' }],\n    },\n    definitions: {\n      additionalProperties: { $ref: '#' },\n    },\n    patternProperties: {\n      additionalProperties: { $ref: '#' },\n    },\n    properties: {\n      additionalProperties: { $ref: '#' },\n    },\n    if: { $ref: '#' },\n    then: { $ref: '#' },\n    else: { $ref: '#' },\n    allOf: { $ref: '#/definitions/schemaArray' },\n    anyOf: { $ref: '#/definitions/schemaArray' },\n    oneOf: { $ref: '#/definitions/schemaArray' },\n    not: { $ref: '#' },\n    contains: { $ref: '#' },\n    propertyNames: { $ref: '#' },\n  },\n})\n\nexport function isSecureSchema<T = Record<string, any>>(schema: JSONSchemaType<T>): boolean {\n  const ajv = new Ajv()\n  addFormats(ajv)\n  ajv.compile(schema)\n  return validateSchemaSecure(schema)\n}\n"],"names":["CID","fromString","toString","TileDocument","CIP88_REF_PREFIX","StreamRef","CommitID","encodedDataStoreModel","CIP11_DEFINITION_SCHEMA_URL","pascalCase","camelCase","CIP88_APPEND_COLLECTION_PREFIX","Ajv","addFormats"],"mappings":"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"}