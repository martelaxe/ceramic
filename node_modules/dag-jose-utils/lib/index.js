"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeCleartext = exports.prepareCleartext = exports.decodeIdentityCID = exports.encodeIdentityCID = exports.toJWSStrings = exports.toJWSPayload = exports.encodePayload = void 0;
const Block = __importStar(require("multiformats/block"));
const cid_1 = require("multiformats/cid");
const sha2_1 = require("multiformats/hashes/sha2");
const identity_1 = require("multiformats/hashes/identity");
const base64_1 = require("multiformats/bases/base64");
const dagCBOR = __importStar(require("@ipld/dag-cbor"));
const ENC_BLOCK_SIZE = 24;
function encodePayload(payload) {
    return __awaiter(this, void 0, void 0, function* () {
        const block = yield Block.encode({ value: payload, codec: dagCBOR, hasher: sha2_1.sha256 });
        return {
            cid: block.cid,
            linkedBlock: block.bytes,
        };
    });
}
exports.encodePayload = encodePayload;
function toJWSPayload(payload) {
    let cid = cid_1.CID.asCID(payload);
    if (!cid) {
        cid = cid_1.CID.asCID(payload.cid);
    }
    if (!cid) {
        throw new Error('Payload must be an EncodedPayload or a CID');
    }
    return base64_1.base64url.encode(cid.bytes).slice(1);
}
exports.toJWSPayload = toJWSPayload;
function toJWSStrings(jose) {
    if (typeof jose === 'object' &&
        typeof jose.payload === 'string' &&
        Array.isArray(jose.signatures)) {
        return jose.signatures.map((signature) => {
            if (typeof signature !== 'object' ||
                typeof signature.protected !== 'string' ||
                typeof signature.signature !== 'string') {
                throw new Error('Object must be a DagJWS');
            }
            return `${signature.protected}.${jose.payload}.${signature.signature}`;
        }, []);
    }
    throw new Error('Object must be a DagJWS');
}
exports.toJWSStrings = toJWSStrings;
function pad(b, blockSize = ENC_BLOCK_SIZE) {
    const padLen = (blockSize - (b.length % blockSize)) % blockSize;
    const bytes = new Uint8Array(b.length + padLen);
    bytes.set(b, 0);
    return bytes;
}
function encodeIdentityCID(obj) {
    return __awaiter(this, void 0, void 0, function* () {
        const block = yield Block.encode({ value: obj, codec: dagCBOR, hasher: identity_1.identity });
        return block.cid;
    });
}
exports.encodeIdentityCID = encodeIdentityCID;
function decodeIdentityCID(cid) {
    cid = cid_1.CID.asCID(cid);
    if (cid.code !== dagCBOR.code)
        throw new Error('CID codec must be dag-cbor');
    if (cid.multihash.code !== identity_1.identity.code)
        throw new Error('CID must use identity multihash');
    return dagCBOR.decode(cid.multihash.digest);
}
exports.decodeIdentityCID = decodeIdentityCID;
function prepareCleartext(cleartext, blockSize) {
    return __awaiter(this, void 0, void 0, function* () {
        return pad((yield encodeIdentityCID(cleartext)).bytes, blockSize);
    });
}
exports.prepareCleartext = prepareCleartext;
function decodeCleartext(b) {
    return decodeIdentityCID(cid_1.CID.decodeFirst(b)[0]);
}
exports.decodeCleartext = decodeCleartext;
//# sourceMappingURL=index.js.map