import { DIDResolutionResult, VerificationMethod } from 'did-resolver';
export declare class NftDidVector {
    nftDid: string;
    nftOwners: string[] | undefined;
    verificationMethods: VerificationMethod[] | undefined;
    versionId: string | undefined;
    versionTime: string | undefined;
    caip10Controller: string | undefined;
    errorMessage: string | undefined;
    constructor(vectorBuilder: NftDidVectorBuilder);
    getDidWithVersionId(): string;
    getDidWithVersionTime(): string;
    getResult(): DIDResolutionResult;
}
export declare class NftDidVectorBuilder {
    readonly nftNamespace: string;
    readonly caip2ChainId: string;
    nftDid: string;
    nftContract: string | undefined;
    nftId: string | undefined;
    nftOwners: string[] | undefined;
    verificationMethods: VerificationMethod[] | undefined;
    versionId: string | undefined;
    versionTime: string | undefined;
    caip10Controller: string | undefined;
    errorMessage: string | undefined;
    constructor(caip2ChainId: string, nftNamespace: string);
    setNftContract(nftContract: string): NftDidVectorBuilder;
    setNftId(nftId: string): NftDidVectorBuilder;
    setNftOwners(nftOwners: string[]): NftDidVectorBuilder;
    setNftDid(nftDid: string): NftDidVectorBuilder;
    setVerificationMethods(methods: VerificationMethod[]): NftDidVectorBuilder;
    setCaip10Controller(caip10Controller: string): NftDidVectorBuilder;
    setErrorMessage(errorMessage: string): NftDidVectorBuilder;
    setVersionId(versionId: string): NftDidVectorBuilder;
    setVersionTime(versionTime: string): NftDidVectorBuilder;
    build(): NftDidVector;
    private makeDid;
    private makeVerificationMethods;
}
//# sourceMappingURL=nft-did-vector.d.ts.map